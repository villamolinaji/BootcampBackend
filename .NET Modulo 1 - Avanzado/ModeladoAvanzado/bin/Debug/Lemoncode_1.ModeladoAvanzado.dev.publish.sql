/*
Deployment script for Lemoncode.ModeladoAvanzado.dev

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Lemoncode.ModeladoAvanzado.dev"
:setvar DefaultFilePrefix "Lemoncode.ModeladoAvanzado.dev"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping Foreign Key unnamed constraint on [dbo].[Area]...';


GO
ALTER TABLE [dbo].[Area] DROP CONSTRAINT [FK__Area__AreaPadreI__4F7CD00D];


GO
PRINT N'Dropping Foreign Key unnamed constraint on [dbo].[Curso]...';


GO
ALTER TABLE [dbo].[Curso] DROP CONSTRAINT [FK__Curso__AreaId__5070F446];


GO
PRINT N'Dropping Foreign Key unnamed constraint on [dbo].[CursoAutor]...';


GO
ALTER TABLE [dbo].[CursoAutor] DROP CONSTRAINT [FK__CursoAuto__Autor__52593CB8];


GO
PRINT N'Dropping Foreign Key unnamed constraint on [dbo].[CursoAutor]...';


GO
ALTER TABLE [dbo].[CursoAutor] DROP CONSTRAINT [FK__CursoAuto__Curso__5165187F];


GO
PRINT N'Dropping Foreign Key unnamed constraint on [dbo].[Leccion]...';


GO
ALTER TABLE [dbo].[Leccion] DROP CONSTRAINT [FK__Leccion__CursoId__534D60F1];


GO
PRINT N'Dropping Foreign Key unnamed constraint on [dbo].[TagCurso]...';


GO
ALTER TABLE [dbo].[TagCurso] DROP CONSTRAINT [FK__TagCurso__CursoI__59FA5E80];


GO
PRINT N'Dropping Foreign Key unnamed constraint on [dbo].[Leccion]...';


GO
ALTER TABLE [dbo].[Leccion] DROP CONSTRAINT [FK__Leccion__VideoID__5441852A];


GO
PRINT N'Dropping Foreign Key unnamed constraint on [dbo].[SubscripcionUsuario]...';


GO
ALTER TABLE [dbo].[SubscripcionUsuario] DROP CONSTRAINT [FK__Subscripc__Subsc__5535A963];


GO
PRINT N'Dropping Foreign Key unnamed constraint on [dbo].[SubscripcionVideo]...';


GO
ALTER TABLE [dbo].[SubscripcionVideo] DROP CONSTRAINT [FK__Subscripc__Subsc__571DF1D5];


GO
PRINT N'Dropping Foreign Key unnamed constraint on [dbo].[SubscripcionUsuario]...';


GO
ALTER TABLE [dbo].[SubscripcionUsuario] DROP CONSTRAINT [FK__Subscripc__Usuar__5629CD9C];


GO
PRINT N'Dropping Foreign Key unnamed constraint on [dbo].[SubscripcionVideo]...';


GO
ALTER TABLE [dbo].[SubscripcionVideo] DROP CONSTRAINT [FK__Subscripc__Video__5812160E];


GO
PRINT N'Dropping Foreign Key unnamed constraint on [dbo].[TagCurso]...';


GO
ALTER TABLE [dbo].[TagCurso] DROP CONSTRAINT [FK__TagCurso__TagId__59063A47];


GO
PRINT N'Dropping Foreign Key unnamed constraint on [dbo].[TagVideo]...';


GO
ALTER TABLE [dbo].[TagVideo] DROP CONSTRAINT [FK__TagVideo__TagId__5AEE82B9];


GO
PRINT N'Dropping Foreign Key unnamed constraint on [dbo].[TagVideo]...';


GO
ALTER TABLE [dbo].[TagVideo] DROP CONSTRAINT [FK__TagVideo__VideoI__5BE2A6F2];


GO
PRINT N'Dropping Foreign Key unnamed constraint on [dbo].[Visualizacion]...';


GO
ALTER TABLE [dbo].[Visualizacion] DROP CONSTRAINT [FK__Visualiza__Usuar__5DCAEF64];


GO
PRINT N'Dropping Foreign Key unnamed constraint on [dbo].[Visualizacion]...';


GO
ALTER TABLE [dbo].[Visualizacion] DROP CONSTRAINT [FK__Visualiza__Video__5CD6CB2B];


GO
PRINT N'Starting rebuilding table [dbo].[Area]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Area] (
    [AreaId]      INT           IDENTITY (1, 1) NOT NULL,
    [AreaPadreId] INT           NULL,
    [AreaNombre]  NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([AreaId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Area])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Area] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Area] ([AreaId], [AreaPadreId], [AreaNombre])
        SELECT   [AreaId],
                 [AreaPadreId],
                 [AreaNombre]
        FROM     [dbo].[Area]
        ORDER BY [AreaId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Area] OFF;
    END

DROP TABLE [dbo].[Area];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Area]', N'Area';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Autor]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Autor] (
    [AutorId]     INT            IDENTITY (1, 1) NOT NULL,
    [Nombre]      NVARCHAR (200) NOT NULL,
    [Descripcion] NVARCHAR (MAX) NOT NULL,
    [Twitter]     NVARCHAR (500) NULL,
    [GitHub]      NVARCHAR (500) NULL,
    PRIMARY KEY CLUSTERED ([AutorId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Autor])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Autor] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Autor] ([AutorId], [Nombre], [Descripcion], [Twitter], [GitHub])
        SELECT   [AutorId],
                 [Nombre],
                 [Descripcion],
                 [Twitter],
                 [GitHub]
        FROM     [dbo].[Autor]
        ORDER BY [AutorId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Autor] OFF;
    END

DROP TABLE [dbo].[Autor];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Autor]', N'Autor';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Curso]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Curso] (
    [CursoId]  INT            IDENTITY (1, 1) NOT NULL,
    [Titulo]   NVARCHAR (100) NOT NULL,
    [AreaId]   INT            NOT NULL,
    [Resumen]  NVARCHAR (MAX) NOT NULL,
    [CursoURL] NVARCHAR (250) NOT NULL,
    PRIMARY KEY CLUSTERED ([CursoId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Curso])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Curso] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Curso] ([CursoId], [Titulo], [AreaId], [Resumen], [CursoURL])
        SELECT   [CursoId],
                 [Titulo],
                 [AreaId],
                 [Resumen],
                 [CursoURL]
        FROM     [dbo].[Curso]
        ORDER BY [CursoId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Curso] OFF;
    END

DROP TABLE [dbo].[Curso];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Curso]', N'Curso';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[CursoAutor]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_CursoAutor] (
    [CursoAutorId] INT IDENTITY (1, 1) NOT NULL,
    [CursoId]      INT NOT NULL,
    [AutorId]      INT NOT NULL,
    PRIMARY KEY CLUSTERED ([CursoAutorId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[CursoAutor])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_CursoAutor] ON;
        INSERT INTO [dbo].[tmp_ms_xx_CursoAutor] ([CursoAutorId], [CursoId], [AutorId])
        SELECT   [CursoAutorId],
                 [CursoId],
                 [AutorId]
        FROM     [dbo].[CursoAutor]
        ORDER BY [CursoAutorId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_CursoAutor] OFF;
    END

DROP TABLE [dbo].[CursoAutor];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_CursoAutor]', N'CursoAutor';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Leccion]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Leccion] (
    [LeccionId]        INT            IDENTITY (1, 1) NOT NULL,
    [CursoId]          INT            NOT NULL,
    [VideoID]          INT            NOT NULL,
    [TextoURL]         NVARCHAR (500) NOT NULL,
    [FechaPublicacion] DATETIME       NOT NULL,
    PRIMARY KEY CLUSTERED ([LeccionId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Leccion])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Leccion] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Leccion] ([LeccionId], [CursoId], [VideoID], [TextoURL], [FechaPublicacion])
        SELECT   [LeccionId],
                 [CursoId],
                 [VideoID],
                 [TextoURL],
                 [FechaPublicacion]
        FROM     [dbo].[Leccion]
        ORDER BY [LeccionId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Leccion] OFF;
    END

DROP TABLE [dbo].[Leccion];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Leccion]', N'Leccion';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Subscripcion]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Subscripcion] (
    [SubscripcionId] INT            IDENTITY (1, 1) NOT NULL,
    [Nombre]         NVARCHAR (200) NOT NULL,
    PRIMARY KEY CLUSTERED ([SubscripcionId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Subscripcion])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Subscripcion] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Subscripcion] ([SubscripcionId], [Nombre])
        SELECT   [SubscripcionId],
                 [Nombre]
        FROM     [dbo].[Subscripcion]
        ORDER BY [SubscripcionId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Subscripcion] OFF;
    END

DROP TABLE [dbo].[Subscripcion];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Subscripcion]', N'Subscripcion';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[SubscripcionUsuario]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_SubscripcionUsuario] (
    [SubscripcionUsuarioId] INT      IDENTITY (1, 1) NOT NULL,
    [SubscripcionId]        INT      NOT NULL,
    [UsuarioId]             INT      NOT NULL,
    [FechaSubscripcion]     DATETIME NOT NULL,
    PRIMARY KEY CLUSTERED ([SubscripcionUsuarioId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[SubscripcionUsuario])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_SubscripcionUsuario] ON;
        INSERT INTO [dbo].[tmp_ms_xx_SubscripcionUsuario] ([SubscripcionUsuarioId], [SubscripcionId], [UsuarioId], [FechaSubscripcion])
        SELECT   [SubscripcionUsuarioId],
                 [SubscripcionId],
                 [UsuarioId],
                 [FechaSubscripcion]
        FROM     [dbo].[SubscripcionUsuario]
        ORDER BY [SubscripcionUsuarioId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_SubscripcionUsuario] OFF;
    END

DROP TABLE [dbo].[SubscripcionUsuario];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_SubscripcionUsuario]', N'SubscripcionUsuario';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[SubscripcionVideo]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_SubscripcionVideo] (
    [SubscripcionVideoId] INT IDENTITY (1, 1) NOT NULL,
    [SubscripcionId]      INT NOT NULL,
    [VideoId]             INT NOT NULL,
    PRIMARY KEY CLUSTERED ([SubscripcionVideoId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[SubscripcionVideo])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_SubscripcionVideo] ON;
        INSERT INTO [dbo].[tmp_ms_xx_SubscripcionVideo] ([SubscripcionVideoId], [SubscripcionId], [VideoId])
        SELECT   [SubscripcionVideoId],
                 [SubscripcionId],
                 [VideoId]
        FROM     [dbo].[SubscripcionVideo]
        ORDER BY [SubscripcionVideoId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_SubscripcionVideo] OFF;
    END

DROP TABLE [dbo].[SubscripcionVideo];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_SubscripcionVideo]', N'SubscripcionVideo';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Tag]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Tag] (
    [TagId] INT           IDENTITY (1, 1) NOT NULL,
    [Tag]   NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([TagId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Tag])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Tag] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Tag] ([TagId], [Tag])
        SELECT   [TagId],
                 [Tag]
        FROM     [dbo].[Tag]
        ORDER BY [TagId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Tag] OFF;
    END

DROP TABLE [dbo].[Tag];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Tag]', N'Tag';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[TagCurso]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_TagCurso] (
    [TagCursoId] INT IDENTITY (1, 1) NOT NULL,
    [TagId]      INT NOT NULL,
    [CursoId]    INT NOT NULL,
    PRIMARY KEY CLUSTERED ([TagCursoId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[TagCurso])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_TagCurso] ON;
        INSERT INTO [dbo].[tmp_ms_xx_TagCurso] ([TagCursoId], [TagId], [CursoId])
        SELECT   [TagCursoId],
                 [TagId],
                 [CursoId]
        FROM     [dbo].[TagCurso]
        ORDER BY [TagCursoId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_TagCurso] OFF;
    END

DROP TABLE [dbo].[TagCurso];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_TagCurso]', N'TagCurso';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[TagVideo]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_TagVideo] (
    [TagVideoId] INT IDENTITY (1, 1) NOT NULL,
    [TagId]      INT NOT NULL,
    [VideoId]    INT NOT NULL,
    PRIMARY KEY CLUSTERED ([TagVideoId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[TagVideo])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_TagVideo] ON;
        INSERT INTO [dbo].[tmp_ms_xx_TagVideo] ([TagVideoId], [TagId], [VideoId])
        SELECT   [TagVideoId],
                 [TagId],
                 [VideoId]
        FROM     [dbo].[TagVideo]
        ORDER BY [TagVideoId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_TagVideo] OFF;
    END

DROP TABLE [dbo].[TagVideo];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_TagVideo]', N'TagVideo';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Usuario]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Usuario] (
    [UsuarioId]  INT            IDENTITY (1, 1) NOT NULL,
    [Nombre]     NVARCHAR (200) NOT NULL,
    [Email]      NVARCHAR (500) NOT NULL,
    [Contraseña] BINARY (64)    NOT NULL,
    PRIMARY KEY CLUSTERED ([UsuarioId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Usuario])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Usuario] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Usuario] ([UsuarioId], [Nombre], [Email], [Contraseña])
        SELECT   [UsuarioId],
                 [Nombre],
                 [Email],
                 [Contraseña]
        FROM     [dbo].[Usuario]
        ORDER BY [UsuarioId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Usuario] OFF;
    END

DROP TABLE [dbo].[Usuario];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Usuario]', N'Usuario';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Video]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Video] (
    [VideoId]  INT            IDENTITY (1, 1) NOT NULL,
    [VideoURL] NVARCHAR (500) NOT NULL,
    PRIMARY KEY CLUSTERED ([VideoId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Video])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Video] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Video] ([VideoId], [VideoURL])
        SELECT   [VideoId],
                 [VideoURL]
        FROM     [dbo].[Video]
        ORDER BY [VideoId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Video] OFF;
    END

DROP TABLE [dbo].[Video];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Video]', N'Video';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Visualizacion]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Visualizacion] (
    [VisualizacionId]    INT      IDENTITY (1, 1) NOT NULL,
    [VideoId]            INT      NOT NULL,
    [UsuarioId]          INT      NULL,
    [FechaVisualizacion] DATETIME NOT NULL,
    PRIMARY KEY CLUSTERED ([VisualizacionId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Visualizacion])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Visualizacion] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Visualizacion] ([VisualizacionId], [VideoId], [UsuarioId], [FechaVisualizacion])
        SELECT   [VisualizacionId],
                 [VideoId],
                 [UsuarioId],
                 [FechaVisualizacion]
        FROM     [dbo].[Visualizacion]
        ORDER BY [VisualizacionId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Visualizacion] OFF;
    END

DROP TABLE [dbo].[Visualizacion];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Visualizacion]', N'Visualizacion';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Area]...';


GO
ALTER TABLE [dbo].[Area] WITH NOCHECK
    ADD FOREIGN KEY ([AreaPadreId]) REFERENCES [dbo].[Area] ([AreaId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Curso]...';


GO
ALTER TABLE [dbo].[Curso] WITH NOCHECK
    ADD FOREIGN KEY ([AreaId]) REFERENCES [dbo].[Area] ([AreaId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[CursoAutor]...';


GO
ALTER TABLE [dbo].[CursoAutor] WITH NOCHECK
    ADD FOREIGN KEY ([AutorId]) REFERENCES [dbo].[Autor] ([AutorId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[CursoAutor]...';


GO
ALTER TABLE [dbo].[CursoAutor] WITH NOCHECK
    ADD FOREIGN KEY ([CursoId]) REFERENCES [dbo].[Curso] ([CursoId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Leccion]...';


GO
ALTER TABLE [dbo].[Leccion] WITH NOCHECK
    ADD FOREIGN KEY ([CursoId]) REFERENCES [dbo].[Curso] ([CursoId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[TagCurso]...';


GO
ALTER TABLE [dbo].[TagCurso] WITH NOCHECK
    ADD FOREIGN KEY ([CursoId]) REFERENCES [dbo].[Curso] ([CursoId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Leccion]...';


GO
ALTER TABLE [dbo].[Leccion] WITH NOCHECK
    ADD FOREIGN KEY ([VideoID]) REFERENCES [dbo].[Video] ([VideoId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[SubscripcionUsuario]...';


GO
ALTER TABLE [dbo].[SubscripcionUsuario] WITH NOCHECK
    ADD FOREIGN KEY ([SubscripcionId]) REFERENCES [dbo].[Subscripcion] ([SubscripcionId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[SubscripcionVideo]...';


GO
ALTER TABLE [dbo].[SubscripcionVideo] WITH NOCHECK
    ADD FOREIGN KEY ([SubscripcionId]) REFERENCES [dbo].[Subscripcion] ([SubscripcionId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[SubscripcionUsuario]...';


GO
ALTER TABLE [dbo].[SubscripcionUsuario] WITH NOCHECK
    ADD FOREIGN KEY ([UsuarioId]) REFERENCES [dbo].[Usuario] ([UsuarioId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[SubscripcionVideo]...';


GO
ALTER TABLE [dbo].[SubscripcionVideo] WITH NOCHECK
    ADD FOREIGN KEY ([VideoId]) REFERENCES [dbo].[Video] ([VideoId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[TagCurso]...';


GO
ALTER TABLE [dbo].[TagCurso] WITH NOCHECK
    ADD FOREIGN KEY ([TagId]) REFERENCES [dbo].[Tag] ([TagId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[TagVideo]...';


GO
ALTER TABLE [dbo].[TagVideo] WITH NOCHECK
    ADD FOREIGN KEY ([TagId]) REFERENCES [dbo].[Tag] ([TagId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[TagVideo]...';


GO
ALTER TABLE [dbo].[TagVideo] WITH NOCHECK
    ADD FOREIGN KEY ([VideoId]) REFERENCES [dbo].[Video] ([VideoId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Visualizacion]...';


GO
ALTER TABLE [dbo].[Visualizacion] WITH NOCHECK
    ADD FOREIGN KEY ([UsuarioId]) REFERENCES [dbo].[Usuario] ([UsuarioId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Visualizacion]...';


GO
ALTER TABLE [dbo].[Visualizacion] WITH NOCHECK
    ADD FOREIGN KEY ([VideoId]) REFERENCES [dbo].[Video] ([VideoId]);


GO
PRINT N'Refreshing View [dbo].[vAreaPrincipal]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vAreaPrincipal]';


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.Area'), OBJECT_ID(N'dbo.Curso'), OBJECT_ID(N'dbo.CursoAutor'), OBJECT_ID(N'dbo.Leccion'), OBJECT_ID(N'dbo.TagCurso'), OBJECT_ID(N'dbo.SubscripcionUsuario'), OBJECT_ID(N'dbo.SubscripcionVideo'), OBJECT_ID(N'dbo.TagVideo'), OBJECT_ID(N'dbo.Visualizacion'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
